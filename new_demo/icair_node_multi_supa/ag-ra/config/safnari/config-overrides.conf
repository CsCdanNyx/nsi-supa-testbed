include "application.conf"

# postgresql database configuration
db.default {
  url = "jdbc:postgresql://nsi-postgres/nsi-safnari"
  username = "nsi-safnari-user"
  password = "nsitest"
}

application.secret = "nsitest-dev-secret-key-for-testing-purposes-only"  # my test
# play.i18n.langs=["en"] # nsi-safnari

# Path Computation Element configuration
pce {
  actor = real  # dummy / real
  endpoint = "http://nsi-pce:8080"
  algorithm = chain   # chain/sequential
}

# NSI aggregator configuration
nsi {
  actor = real  # dummy / real
  # base URL used in in reply-to header (this is not the client/server configuration)
  base.url = "http://165.124.33.153:9080"
  # use a two-way TLS map in conjunction with a TLS proxy like stunnel
  twoway.tls = false
  tlsmap = {}
}

safnari {
  # The NSA identifier and display name of this NSA.
  nsa {
    id = "urn:ogf:network:icairtest.org:2025:nsa:safnari"
    name = "iCAIR Safnari Dev"
  }

  # Administrative contact information for this NSA.
  adminContact {
    surname = "iCAIR"
    given = "ICAIR"
    prodid = "iCAIR safnari"
  }

  # If this NSA is also a uPA (optional) we add the list of
  # networks the NSA is directly managing.  The `id` parameter
  # is the NML topology identifier for the network, and `url`
  # is the endpoint for retrieving the NML XML file.
  # network {     # nsi-safnari
  #   id = "urn:ogf:network:surfnet.nl:1990:testbed"
  #   url = "https://bod.acc.dlp.surfnet.nl/nsi-topology"
  # }
  # network {
  #   id = "urn:ogf:network:icairtest.org:2025:topology"
  #   url = "http://165.124.33.153:4321/topology"
  # }
  # Local Document Discovery Service URL if available.
  dds {
   url = "http://nsi-dds:8401/discovery"
  }

  # NSA to which we have set up an RA -> PA peering relationship
  # with us in the RA role.  The DN values is the ssl certificate
  # Subject.
  #peersWith = [     # nsi-safnari
  #  { id = "urn:ogf:network:es.net:2013:nsa:nsi-aggr-west", dn = "/OU=Domain Control Validated/CN=nsi-aggr-west.es.net" },
  #  { id = "urn:ogf:network:geant.net:2013:nsa", dn = "/C=UK/ST=Cambridge/L=Cambridge/O=Geant/CN=beta-bodv3.geant.net" }
  #]
  peersWith = [
    {
      # pa-ar400
      id = "urn:ogf:network:icairtest.org:2025:ar400:nsa:supa"
    },
    {
      # pa-z9432f
      id = "urn:ogf:network:icairtest.org:2025:z9432f:nsa:supa"
    },
    {
      # pa-z9664f
      id = "urn:ogf:network:icairtest.org:2025:z9664f:nsa:supa"
    },
    # {
    #   # NYCU Safnari
    #   id = "urn:ogf:network:nycu.edu.tw:2025:nsa:safnari"
    # }
  ]

  async.reply.timeout = 120 seconds
  connection.expiration.time = 1 day
}




play.filters.hosts {
  # A list of valid hosts (e.g. "example.com") or suffixes of valid hosts (e.g. ".example.com")
  # Note that ".example.com" will match example.com and any subdomain of example.com, with or without a trailing dot.
  # "." matches all domains, and "" matches an empty or nonexistent host.
  # allowed = ["localhost", ".local", "127.0.0.1"]
  allowed = ["."]
}


# HTTP(S) server configuration
play.server {
  http {
    # The HTTP port of the server. Use a value of "disabled" if the server
    # shouldn't bind an HTTP port.
    port = 80
    # address = "localhost"
    address = "0.0.0.0"
  }
  # configure HTTPS, comment out to disable
  # https {
  #   # port = 9999
  #   # address = "localhost"
  #   # keyStore {
  #   #   path = "conf/nsi-safnari-keystore.jks"
  #   #   type = "JKS"
  #   #   password = "changeme"
  #   # }
  #   #
  #   # Note: the default SSL context used does not allow a trust store
  #   #       to be configured here, the default trust store is used instead,
  #   #       please configure the trust store on the command line with:
  #   #           -Djavax.net.ssl.trustStoreType=jks
  #   #           -Djavax.net.ssl.trustStorePassword=secret
  #   #           -Djavax.net.ssl.trustStore=conf/nsi-safnari-truststore.jks 
  #   #
  #   # Whether JSSE need client auth mode should be used. This means, the server
  #   # will request a client certificate, and will fail and terminate the session
  #   # if one isn't provided.
  #   # needClientAuth = true
  # }
}

