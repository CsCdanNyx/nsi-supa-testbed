include "application.conf"

application.secret=">WHknlCprTkSFP20JUhwNaF8CG>lM3v:SuQbWUVJ`]Vd2:BRUdXwDM9fmyEgP:_4"

# The application languages
# ~~~~~
application.langs="en"


# Enable this value to use the original default SSL behavior instead of the new
# Play behavior when using HTTPS natively within the nsi-requester.  This
# controls client side behaviors so we can support 2 way TLS via the Java
# keystore.  With this option set to "true" you must specify the Java key and
# trust stores on the command line.  This is the only option if you want a
# standalone HTTPS server.
# ~~~~~
#ws.ssl.default = true

# With ws.ssl.default == false you can use the Play Framework's new WS client
# features for configuring the backend SSL/TLS sessions.  Use the ws.ssl.keyManager
# and ws.ssl.trustManager to configure the key and trust stores, or alternatively
# specify them on the command line. Additional WS client configuration information
# can be found at http://www.playframework.com/documentation/2.3.x/WsSSL
# ~~~~~
#ws.ssl {
#  default = false
#  keyManager = {
#    stores = [
#      { path: "conf/keystore.jks", type: "JKS", password: "changeit" }
#    ]
#  }
#  trustManager = {
#    stores = [
#      { path: "conf/truststore.jks", type: "JKS", password = "changeit" }
#    ]
#  }
#}

# From nsi-node
# ~~~
# ws.ssl {
#   default = false
#   keyManager = {
#     stores = [
#       { path: "/config/nsi-requester-keystore.jks", type: "JKS", password: "secret" }
#     ]
#   }
#   trustManager = {
#     stores = [
#       { path: "/config/nsi-requester-truststore.jks", type: "JKS", password = "secret" }
#     ]
#   }
# }

# Configure the nsi-requester identity and available provider NSA.
# ~~~~~
requester {
  # Set "ssl" to "true" if you are using SSL natively within the nsi-requester.
  # This forces the https url into the replyto field of the NSI header, otherwise
  # it relies on the "X-Forwarded-Proto" HTTP header field to be set by the
  # fronting HTTP proxy.
  ssl = "false"

  # NSI specific configurations.
  nsi {
    # Unique identifier of the this NSA.  Use something uniquely named under
    # your network.
    requesterNsa = "urn:ogf:network:nycu.edu.tw:2025:nsa:nsi-requester"

    # List of provider addresses made available in the settings menu.  This
    # list is specifically for SURFnet deployment using stunnel for SSL on
    # the back end.  If you are not using stunnel for backewnd SSL then you
    # need to populate the NSA's public provider URL.
    providers = [

      ## some info can be found at supa's document service /discovery page
      # {
      #   id = "urn of supa's domain name"
      #   url = "polynsi's url / polynsi's cxf.path / polynsi's soap.server.connection_provider.path"
      #   portPrefix = "prefix of supa's stp urn (topology urn)"
      # }

      # nycu safnari
      {
        id = "urn:ogf:network:nycu.edu.tw:2025:nsa:safnari"
        url = "http://192.168.13.63:80/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:nycu.edu.tw:2025:topology:"
      }

      # local polynsi + supa
      {
        id = "urn:ogf:network:icairtest.org:2025:nsa:supa"
        url = "http://polynsi:8443/soap/connection/provider"
        portPrefix = "urn:ogf:network:nycu.edu.tw:2025:topology:"
      }


      # icair safnari
      {
        id = "urn:ogf:network:icairtest.org:2025:nsa:safnari"
        url = "http://165.124.33.153:80/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:icairtest.org:2025:nsa:safnari:topology:"
      }

      # icair polynsi + supa
      {
        id = "urn:ogf:network:icairtest.org:2025:nsa:supa"
        url = "http://165.124.33.153:8443/soap/connection/provider"
        portPrefix = "urn:ogf:network:icairtest.org:2025:topology:"
      }


      # surfnet
      {
        id = "urn:ogf:network:cipo.rnp.br:2014:nsa:safnari"
        url = "https://200.128.2.36/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:example.domain:2001:topology:"
      }

      # original examples
      { id = "urn:ogf:network:czechlight.cesnet.cz:2013:nsa"
        url = "http://localhost:9998/NSI/services/CS2"
        portPrefix = "urn:ogf:network:czechlight.cesnet.cz:2013:topology:"
      }
      { id = "urn:ogf:network:es.net:2013:nsa:nsi-aggr-west"
        url = "http://localhost:6693/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:geant.net:2013:nsa"
        url = "http://localhost:6692/nsi/ConnectionProvider"
        portPrefix = "urn:ogf:network:geant.net:2013:topology:"
      }
      { id = "urn:ogf:network:netherlight.net:2013:nsa:bod"
        url = "http://localhost:6777/nsi/v2/provider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:netherlight.net:2013:nsa:safnari"
        url = "http://localhost:6691/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:nordu.net:2013:nsa"
        url = "http://localhost:6694/NSI/services/CS2"
        portPrefix = "urn:ogf:network:nordu.net:2013:topology:"
      }
      { id = "urn:ogf:network:nordu.net:2013:testbed:nsa"
        url = "http://localhost:6698/NSI/services/CS2"
        portPrefix = "urn:ogf:network:nordu.net:2013:testbed:topology:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod"
        url = "https://bod.surfnet.nl/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:port:surfnet6:production:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod-acc"
        url = "http://localhost:6697/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod-dev"
        url = "http://localhost:8082/bod/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod-v2-dev"
        url = "http://localhost:8082/bod/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:bod7"
        url = "http://localhost:6695/nsi/v2/provider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:production7:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari"
        url = "http://localhost:6699/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari-acc"
        url = "http://localhost:6696/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:safnari-dev"
        url = "http://localhost:9000/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:mtosi-nsi-bridge-dev"
        url = "http://localhost:9000/nsi-mtosi/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:"
      }
      { id = "urn:ogf:network:surfnet.nl:1990:nsa:nsi-mtosi-bridge"
        url = "https://bod.acc.dlp.surfnet.nl/nsi-mtosi/nsi-v2/ConnectionServiceProvider"
        portPrefix = "urn:ogf:network:surfnet.nl:1990:testbed"
      }
    ]
  }
}
